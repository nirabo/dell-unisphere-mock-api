venv.test/bin/pytest -v tests/ --cov=app --cov-report=term-missing
============================= test session starts ==============================
platform linux -- Python 3.12.3, pytest-7.4.3, pluggy-1.5.0 -- /home/lpetrov/projects/sandbox/dell-unisphere-mock-api/.venv.test/bin/python3
cachedir: .pytest_cache
rootdir: /home/lpetrov/projects/sandbox/dell-unisphere-mock-api
plugins: anyio-3.7.1, asyncio-0.21.1, cov-4.1.0
asyncio: mode=Mode.STRICT
collecting ... collected 74 items

tests/test_auth.py::test_password_verification PASSED                    [  1%]
tests/test_auth.py::test_get_current_user_valid_credentials PASSED       [  2%]
tests/test_auth.py::test_get_current_user_invalid_credentials PASSED     [  4%]
tests/test_auth.py::test_get_current_user_missing_emc_header PASSED      [  5%]
tests/test_auth.py::test_verify_csrf_token_post_request PASSED           [  6%]
tests/test_auth.py::test_verify_csrf_token_get_request PASSED            [  8%]
tests/test_controllers.py::TestStorageResourceController::test_create_storage_resource PASSED [  9%]
tests/test_controllers.py::TestStorageResourceController::test_get_storage_resource PASSED [ 10%]
tests/test_controllers.py::TestStorageResourceController::test_list_storage_resources PASSED [ 12%]
tests/test_controllers.py::TestStorageResourceController::test_update_storage_resource PASSED [ 13%]
tests/test_controllers.py::TestStorageResourceController::test_delete_storage_resource PASSED [ 14%]
tests/test_controllers.py::TestStorageResourceController::test_host_access_management PASSED [ 16%]
tests/test_controllers.py::TestFilesystemController::test_create_filesystem PASSED [ 17%]
tests/test_controllers.py::TestFilesystemController::test_get_filesystem PASSED [ 18%]
tests/test_controllers.py::TestNasServerController::test_create_nas_server PASSED [ 20%]
tests/test_controllers.py::TestNasServerController::test_get_nas_server PASSED [ 21%]
tests/test_disk.py::test_create_disk PASSED                              [ 22%]
tests/test_disk.py::test_create_disk_invalid_type PASSED                 [ 24%]
tests/test_disk.py::test_get_disk PASSED                                 [ 25%]
tests/test_disk.py::test_list_disks PASSED                               [ 27%]
tests/test_disk.py::test_update_disk PASSED                              [ 28%]
tests/test_disk.py::test_delete_disk PASSED                              [ 29%]
tests/test_disk.py::test_get_disks_by_pool PASSED                        [ 31%]
tests/test_disk.py::test_get_disks_by_disk_group PASSED                  [ 32%]
tests/test_disk_group.py::test_create_disk_group FAILED                  [ 33%]
tests/test_disk_group.py::test_create_disk_group_invalid_raid FAILED     [ 35%]
tests/test_disk_group.py::test_get_disk_group FAILED                     [ 36%]
tests/test_disk_group.py::test_list_disk_groups PASSED                   [ 37%]
tests/test_disk_group.py::test_update_disk_group FAILED                  [ 39%]
tests/test_disk_group.py::test_delete_disk_group FAILED                  [ 40%]
tests/test_lun.py::test_create_lun PASSED                                [ 41%]
tests/test_lun.py::test_get_lun PASSED                                   [ 43%]
tests/test_lun.py::test_get_lun_by_name FAILED                           [ 44%]
tests/test_lun.py::test_list_luns PASSED                                 [ 45%]
tests/test_lun.py::test_get_luns_by_pool PASSED                          [ 47%]
tests/test_lun.py::test_modify_lun FAILED                                [ 48%]
tests/test_lun.py::test_delete_lun PASSED                                [ 50%]
tests/test_lun.py::test_delete_lun_by_name FAILED                        [ 51%]
tests/test_models.py::TestStorageResourceModel::test_create_storage_resource PASSED [ 52%]
tests/test_models.py::TestStorageResourceModel::test_get_storage_resource PASSED [ 54%]
tests/test_models.py::TestStorageResourceModel::test_list_storage_resources PASSED [ 55%]
tests/test_models.py::TestStorageResourceModel::test_update_storage_resource PASSED [ 56%]
tests/test_models.py::TestStorageResourceModel::test_delete_storage_resource PASSED [ 58%]
tests/test_models.py::TestStorageResourceModel::test_host_access_management PASSED [ 59%]
tests/test_models.py::TestStorageResourceModel::test_update_usage_stats PASSED [ 60%]
tests/test_models.py::TestFilesystemModel::test_create_filesystem PASSED [ 62%]
tests/test_models.py::TestFilesystemModel::test_get_filesystem PASSED    [ 63%]
tests/test_models.py::TestFilesystemModel::test_list_filesystems PASSED  [ 64%]
tests/test_models.py::TestNasServerModel::test_create_nas_server PASSED  [ 66%]
tests/test_models.py::TestNasServerModel::test_get_nas_server PASSED     [ 67%]
tests/test_models.py::TestNasServerModel::test_list_nas_servers PASSED   [ 68%]
tests/test_pool.py::test_create_pool PASSED                              [ 70%]
tests/test_pool.py::test_get_pool PASSED                                 [ 71%]
tests/test_pool.py::test_get_pool_by_name FAILED                         [ 72%]
tests/test_pool.py::test_list_pools PASSED                               [ 74%]
tests/test_pool.py::test_modify_pool FAILED                              [ 75%]
tests/test_pool.py::test_delete_pool PASSED                              [ 77%]
tests/test_pool.py::test_delete_pool_by_name FAILED                      [ 78%]
tests/test_pool_unit.py::test_create_pool_unit FAILED                    [ 79%]
tests/test_pool_unit.py::test_get_pool_unit FAILED                       [ 81%]
tests/test_pool_unit.py::test_list_pool_units FAILED                     [ 82%]
tests/test_pool_unit.py::test_update_pool_unit FAILED                    [ 83%]
tests/test_pool_unit.py::test_delete_pool_unit FAILED                    [ 85%]
tests/test_routes.py::TestStorageResourceRoutes::test_create_storage_resource PASSED [ 86%]
tests/test_routes.py::TestStorageResourceRoutes::test_get_storage_resource PASSED [ 87%]
tests/test_routes.py::TestStorageResourceRoutes::test_list_storage_resources PASSED [ 89%]
tests/test_routes.py::TestStorageResourceRoutes::test_update_storage_resource PASSED [ 90%]
tests/test_routes.py::TestStorageResourceRoutes::test_delete_storage_resource PASSED [ 91%]
tests/test_routes.py::TestStorageResourceRoutes::test_host_access_management PASSED [ 93%]
tests/test_routes.py::TestStorageResourceRoutes::test_unauthorized_access FAILED [ 94%]
tests/test_routes.py::TestFilesystemRoutes::test_create_filesystem PASSED [ 95%]
tests/test_routes.py::TestFilesystemRoutes::test_get_filesystem PASSED   [ 97%]
tests/test_routes.py::TestNasServerRoutes::test_create_nas_server PASSED [ 98%]
tests/test_routes.py::TestNasServerRoutes::test_get_nas_server PASSED    [100%]WARNING: Failed to generate report: No data to report.



=================================== FAILURES ===================================
____________________________ test_create_disk_group ____________________________

test_client = <starlette.testclient.TestClient object at 0x7551eeba2a50>
auth_headers = {'Authorization': 'Basic YWRtaW46UGFzc3dvcmQxMjMh', 'EMC-CSRF-TOKEN': 'Ru8NKNCAnoOHAqy6Dr1eHT/xN9jKg4ivupUb3vID+tc=', 'X-EMC-REST-CLIENT': 'true'}
disk_group_data = {'description': 'Test disk group', 'disk_ids': ['1', '2', '3', '4', '5'], 'name': 'test_disk_group', 'raid_type': <RaidTypeEnum.RAID5: 'RAID5'>, ...}

    def test_create_disk_group(test_client, auth_headers, disk_group_data):
        """Test creating a new disk group."""
        response = test_client.post(
            "/api/types/diskGroup/instances",
            json=disk_group_data,
            headers=auth_headers
        )
>       assert response.status_code == 201
E       assert 422 == 201
E        +  where 422 = <Response [422 Unprocessable Entity]>.status_code

tests/test_disk_group.py:29: AssertionError
_____________________ test_create_disk_group_invalid_raid ______________________

test_client = <starlette.testclient.TestClient object at 0x7551eeba0b60>
auth_headers = {'Authorization': 'Basic YWRtaW46UGFzc3dvcmQxMjMh', 'EMC-CSRF-TOKEN': '0Jf3CTcdYLkhQ8YoZ5NRD2Ub8y+CX+q5PYzZSJrH1is=', 'X-EMC-REST-CLIENT': 'true'}

    def test_create_disk_group_invalid_raid(test_client, auth_headers):
        """Test creating a disk group with invalid RAID configuration."""
        invalid_disk_group_data = {
            "name": "test_disk_group",
            "raid_type": RaidTypeEnum.RAID5,
            "stripe_width": RaidStripeWidthEnum.FIVE,
            "disk_ids": ["1", "2", "3"],  # Not enough disks for RAID5
            "size_total": 1000000,
            "size_used": 0,
            "size_free": 1000000
        }
    
        response = test_client.post(
            "/api/types/diskGroup/instances",
            json=invalid_disk_group_data,
            headers=auth_headers
        )
>       assert response.status_code == 400
E       assert 422 == 400
E        +  where 422 = <Response [422 Unprocessable Entity]>.status_code

tests/test_disk_group.py:51: AssertionError
_____________________________ test_get_disk_group ______________________________

test_client = <starlette.testclient.TestClient object at 0x7551eea22a20>
auth_headers = {'Authorization': 'Basic YWRtaW46UGFzc3dvcmQxMjMh', 'EMC-CSRF-TOKEN': 'KoFzfqHQqnqGe6tRyLZqBvSWTb7iYAwX3TUwkWcsgjc=', 'X-EMC-REST-CLIENT': 'true'}
disk_group_data = {'description': 'Test disk group', 'disk_ids': ['1', '2', '3', '4', '5'], 'name': 'test_disk_group', 'raid_type': <RaidTypeEnum.RAID5: 'RAID5'>, ...}

    def test_get_disk_group(test_client, auth_headers, disk_group_data):
        """Test getting a specific disk group."""
        # First create a disk group
        create_response = test_client.post(
            "/api/types/diskGroup/instances",
            json=disk_group_data,
            headers=auth_headers
        )
>       assert create_response.status_code == 201
E       assert 422 == 201
E        +  where 422 = <Response [422 Unprocessable Entity]>.status_code

tests/test_disk_group.py:61: AssertionError
____________________________ test_update_disk_group ____________________________

test_client = <starlette.testclient.TestClient object at 0x7551eeba3320>
auth_headers = {'Authorization': 'Basic YWRtaW46UGFzc3dvcmQxMjMh', 'EMC-CSRF-TOKEN': 'kZKIk2tQ/TnxGE6OTmc+aI1un5ZCNxsnzGq8p/47SNo=', 'X-EMC-REST-CLIENT': 'true'}
disk_group_data = {'description': 'Test disk group', 'disk_ids': ['1', '2', '3', '4', '5'], 'name': 'test_disk_group', 'raid_type': <RaidTypeEnum.RAID5: 'RAID5'>, ...}

    def test_update_disk_group(test_client, auth_headers, disk_group_data):
        """Test updating a disk group."""
        # First create a disk group
        create_response = test_client.post(
            "/api/types/diskGroup/instances",
            json=disk_group_data,
            headers=auth_headers
        )
>       assert create_response.status_code == 201
E       assert 422 == 201
E        +  where 422 = <Response [422 Unprocessable Entity]>.status_code

tests/test_disk_group.py:91: AssertionError
____________________________ test_delete_disk_group ____________________________

test_client = <starlette.testclient.TestClient object at 0x7551eea495b0>
auth_headers = {'Authorization': 'Basic YWRtaW46UGFzc3dvcmQxMjMh', 'EMC-CSRF-TOKEN': 'Fy7eyMcbIFzJ/nLQALaxuNOnXkTrhH1K16L1O8SCSoQ=', 'X-EMC-REST-CLIENT': 'true'}
disk_group_data = {'description': 'Test disk group', 'disk_ids': ['1', '2', '3', '4', '5'], 'name': 'test_disk_group', 'raid_type': <RaidTypeEnum.RAID5: 'RAID5'>, ...}

    def test_delete_disk_group(test_client, auth_headers, disk_group_data):
        """Test deleting a disk group."""
        # First create a disk group
        create_response = test_client.post(
            "/api/types/diskGroup/instances",
            json=disk_group_data,
            headers=auth_headers
        )
>       assert create_response.status_code == 201
E       assert 422 == 201
E        +  where 422 = <Response [422 Unprocessable Entity]>.status_code

tests/test_disk_group.py:115: AssertionError
_____________________________ test_get_lun_by_name _____________________________

test_client = <starlette.testclient.TestClient object at 0x7551eea20b30>
sample_pool_data = {'alertThreshold': 80, 'description': 'Test pool for unit tests', 'isFASTCacheEnabled': False, 'isFASTVpScheduleEnabled': True, ...}
sample_lun_data = {'defaultNode': 0, 'description': 'Test LUN for unit tests', 'hostAccess': [], 'isCompressionEnabled': False, ...}
auth_headers = {'Authorization': 'Basic YWRtaW46UGFzc3dvcmQxMjMh', 'EMC-CSRF-TOKEN': 'tRR4UC4s2pYyvyXpiD4K5hvki/blNdL0ohdkTzlkYnQ=', 'X-EMC-REST-CLIENT': 'true'}

    def test_get_lun_by_name(test_client, sample_pool_data, sample_lun_data, auth_headers):
        # First create a pool
        pool_response = test_client.post("/api/types/pool/instances", json=sample_pool_data, headers=auth_headers)
        assert pool_response.status_code == 201
        pool_id = pool_response.json()["id"]
        sample_lun_data["pool_id"] = pool_id
    
        # Then create a LUN
        create_response = test_client.post("/api/types/lun/instances", json=sample_lun_data, headers=auth_headers)
        assert create_response.status_code == 201
    
        # Then get it by name
        response = test_client.get(f"/api/instances/lun/name:{sample_lun_data['name']}", headers=auth_headers)
>       assert response.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404 Not Found]>.status_code

tests/test_lun.py:88: AssertionError
_______________________________ test_modify_lun ________________________________

test_client = <starlette.testclient.TestClient object at 0x7551eebea900>
sample_pool_data = {'alertThreshold': 80, 'description': 'Test pool for unit tests', 'isFASTCacheEnabled': False, 'isFASTVpScheduleEnabled': True, ...}
sample_lun_data = {'defaultNode': 0, 'description': 'Test LUN for unit tests', 'hostAccess': [], 'isCompressionEnabled': False, ...}
auth_headers = {'Authorization': 'Basic YWRtaW46UGFzc3dvcmQxMjMh', 'EMC-CSRF-TOKEN': 'p5ISeryiCWLQho8AKfsf0c9eAZl68KPzCoDHiqyG3lg=', 'X-EMC-REST-CLIENT': 'true'}

    def test_modify_lun(test_client, sample_pool_data, sample_lun_data, auth_headers):
        # First create a pool
        pool_response = test_client.post("/api/types/pool/instances", json=sample_pool_data, headers=auth_headers)
        assert pool_response.status_code == 201
        pool_id = pool_response.json()["id"]
        sample_lun_data["pool_id"] = pool_id
    
        # Create a LUN
        create_response = test_client.post("/api/types/lun/instances", json=sample_lun_data, headers=auth_headers)
        assert create_response.status_code == 201
        lun_id = create_response.json()["id"]
    
        # Modify the LUN
        update_data = {
            "description": "Updated LUN description",
            "isCompressionEnabled": True
        }
        response = test_client.patch(f"/api/instances/lun/{lun_id}", json=update_data, headers=auth_headers)
>       assert response.status_code == 200
E       assert 405 == 200
E        +  where 405 = <Response [405 Method Not Allowed]>.status_code

tests/test_lun.py:147: AssertionError
___________________________ test_delete_lun_by_name ____________________________

test_client = <starlette.testclient.TestClient object at 0x7551eea77500>
sample_pool_data = {'alertThreshold': 80, 'description': 'Test pool for unit tests', 'isFASTCacheEnabled': False, 'isFASTVpScheduleEnabled': True, ...}
sample_lun_data = {'defaultNode': 0, 'description': 'Test LUN for unit tests', 'hostAccess': [], 'isCompressionEnabled': False, ...}
auth_headers = {'Authorization': 'Basic YWRtaW46UGFzc3dvcmQxMjMh', 'EMC-CSRF-TOKEN': 'yjifkwWhuU8Kf9vDWCfH18z8H6U2Dtg4j/LS7xHAiC4=', 'X-EMC-REST-CLIENT': 'true'}

    def test_delete_lun_by_name(test_client, sample_pool_data, sample_lun_data, auth_headers):
        # First create a pool
        pool_response = test_client.post("/api/types/pool/instances", json=sample_pool_data, headers=auth_headers)
        assert pool_response.status_code == 201
        pool_id = pool_response.json()["id"]
        sample_lun_data["pool_id"] = pool_id
    
        # Create a LUN
        create_response = test_client.post("/api/types/lun/instances", json=sample_lun_data, headers=auth_headers)
        assert create_response.status_code == 201
    
        # Delete the LUN by name
        response = test_client.delete(f"/api/instances/lun/name:{sample_lun_data['name']}", headers=auth_headers)
>       assert response.status_code == 204
E       assert 404 == 204
E        +  where 404 = <Response [404 Not Found]>.status_code

tests/test_lun.py:185: AssertionError
____________________________ test_get_pool_by_name _____________________________

test_client = <starlette.testclient.TestClient object at 0x7551eea48a10>
sample_pool_data = {'alertThreshold': 80, 'description': 'Test pool for unit tests', 'isFASTCacheEnabled': False, 'isFASTVpScheduleEnabled': True, ...}
auth_headers = {'Authorization': 'Basic YWRtaW46UGFzc3dvcmQxMjMh', 'EMC-CSRF-TOKEN': 'm/PnmRWU1bp1N/sqk9A4sSy89etJi+AECLBXcCaueGA=', 'X-EMC-REST-CLIENT': 'true'}

    def test_get_pool_by_name(test_client, sample_pool_data, auth_headers):
        # First create a pool
        create_response = test_client.post("/api/types/pool/instances", json=sample_pool_data, headers=auth_headers)
        assert create_response.status_code == 201
    
        # Then get it by name
        response = test_client.get(f"/api/instances/pool/name:{sample_pool_data['name']}", headers=auth_headers)
>       assert response.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404 Not Found]>.status_code

tests/test_pool.py:55: AssertionError
_______________________________ test_modify_pool _______________________________

test_client = <starlette.testclient.TestClient object at 0x7551eea48e90>
sample_pool_data = {'alertThreshold': 80, 'description': 'Test pool for unit tests', 'isFASTCacheEnabled': False, 'isFASTVpScheduleEnabled': True, ...}
auth_headers = {'Authorization': 'Basic YWRtaW46UGFzc3dvcmQxMjMh', 'EMC-CSRF-TOKEN': '0jvwdREPr/XJUN87xfoEie9SC+wctpt5yxhARuJs//U=', 'X-EMC-REST-CLIENT': 'true'}

    def test_modify_pool(test_client, sample_pool_data, auth_headers):
        # First create a pool
        create_response = test_client.post("/api/types/pool/instances", json=sample_pool_data, headers=auth_headers)
        assert create_response.status_code == 201
        pool_id = create_response.json()["id"]
    
        # Modify the pool
        update_data = {
            "description": "Modified test pool",
            "alertThreshold": 75
        }
        response = test_client.patch(f"/api/instances/pool/{pool_id}", json=update_data, headers=auth_headers)
>       assert response.status_code == 200
E       assert 405 == 200
E        +  where 405 = <Response [405 Method Not Allowed]>.status_code

tests/test_pool.py:85: AssertionError
___________________________ test_delete_pool_by_name ___________________________

test_client = <starlette.testclient.TestClient object at 0x7551eebea480>
sample_pool_data = {'alertThreshold': 80, 'description': 'Test pool for unit tests', 'isFASTCacheEnabled': False, 'isFASTVpScheduleEnabled': True, ...}
auth_headers = {'Authorization': 'Basic YWRtaW46UGFzc3dvcmQxMjMh', 'EMC-CSRF-TOKEN': 'vD2TKy9qHgC0IIjecdBh0ECaT07DeYW++CXG95IWuo4=', 'X-EMC-REST-CLIENT': 'true'}

    def test_delete_pool_by_name(test_client, sample_pool_data, auth_headers):
        # First create a pool
        create_response = test_client.post("/api/types/pool/instances", json=sample_pool_data, headers=auth_headers)
        assert create_response.status_code == 201
    
        # Delete the pool by name
        response = test_client.delete(f"/api/instances/pool/name:{sample_pool_data['name']}", headers=auth_headers)
>       assert response.status_code == 204
E       assert 404 == 204
E        +  where 404 = <Response [404 Not Found]>.status_code

tests/test_pool.py:112: AssertionError
____________________________ test_create_pool_unit _____________________________

    def test_create_pool_unit():
        """Test creating a new pool unit."""
        pool_unit_data = {
            "name": "test_pool_unit",
            "description": "Test pool unit",
            "type": PoolUnitTypeEnum.VIRTUAL_DISK,
            "size_total": 1000000,
            "size_used": 0,
            "size_free": 1000000,
            "raid_type": "RAID5",
            "disk_group": "1"
        }
    
        response = client.post(
            "/api/types/poolUnit/instances",
            json=pool_unit_data,
            headers=get_auth_headers()
        )
>       assert response.status_code == 201
E       assert 403 == 201
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/test_pool_unit.py:30: AssertionError
______________________________ test_get_pool_unit ______________________________

    def test_get_pool_unit():
        """Test getting a specific pool unit."""
        # First create a pool unit
        pool_unit_data = {
            "name": "test_pool_unit",
            "type": PoolUnitTypeEnum.VIRTUAL_DISK,
            "size_total": 1000000,
            "size_used": 0,
            "size_free": 1000000
        }
        create_response = client.post(
            "/api/types/poolUnit/instances",
            json=pool_unit_data,
            headers=get_auth_headers()
        )
>       pool_unit_id = create_response.json()["id"]

tests/test_pool_unit.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv.test/lib/python3.12/site-packages/httpx/_models.py:761: in json
    return jsonlib.loads(self.content, **kwargs)
/usr/lib/python3.12/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.12/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7551f14413a0>
s = 'EMC-CSRF-TOKEN header is required for POST, PATCH and DELETE requests'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.12/json/decoder.py:355: JSONDecodeError
_____________________________ test_list_pool_units _____________________________

    def test_list_pool_units():
        """Test listing all pool units."""
        response = client.get(
            "/api/types/poolUnit/instances",
            headers=get_auth_headers()
        )
>       assert response.status_code == 200
E       assert 401 == 200
E        +  where 401 = <Response [401 Unauthorized]>.status_code

tests/test_pool_unit.py:68: AssertionError
____________________________ test_update_pool_unit _____________________________

    def test_update_pool_unit():
        """Test updating a pool unit."""
        # First create a pool unit
        pool_unit_data = {
            "name": "test_pool_unit",
            "type": PoolUnitTypeEnum.VIRTUAL_DISK,
            "size_total": 1000000,
            "size_used": 0,
            "size_free": 1000000
        }
        create_response = client.post(
            "/api/types/poolUnit/instances",
            json=pool_unit_data,
            headers=get_auth_headers()
        )
>       pool_unit_id = create_response.json()["id"]

tests/test_pool_unit.py:86: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv.test/lib/python3.12/site-packages/httpx/_models.py:761: in json
    return jsonlib.loads(self.content, **kwargs)
/usr/lib/python3.12/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.12/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7551f14413a0>
s = 'EMC-CSRF-TOKEN header is required for POST, PATCH and DELETE requests'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.12/json/decoder.py:355: JSONDecodeError
____________________________ test_delete_pool_unit _____________________________

    def test_delete_pool_unit():
        """Test deleting a pool unit."""
        # First create a pool unit
        pool_unit_data = {
            "name": "test_pool_unit",
            "type": PoolUnitTypeEnum.VIRTUAL_DISK,
            "size_total": 1000000,
            "size_used": 0,
            "size_free": 1000000
        }
        create_response = client.post(
            "/api/types/poolUnit/instances",
            json=pool_unit_data,
            headers=get_auth_headers()
        )
>       pool_unit_id = create_response.json()["id"]

tests/test_pool_unit.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv.test/lib/python3.12/site-packages/httpx/_models.py:761: in json
    return jsonlib.loads(self.content, **kwargs)
/usr/lib/python3.12/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/usr/lib/python3.12/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <json.decoder.JSONDecoder object at 0x7551f14413a0>
s = 'EMC-CSRF-TOKEN header is required for POST, PATCH and DELETE requests'
idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
>           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/usr/lib/python3.12/json/decoder.py:355: JSONDecodeError
______________ TestStorageResourceRoutes.test_unauthorized_access ______________

self = <tests.test_routes.TestStorageResourceRoutes object at 0x7551eed0caa0>
test_client = <starlette.testclient.TestClient object at 0x7551eea76900>
sample_resource_data = {'description': 'Test storage resource', 'isAdvancedDedupEnabled': False, 'isCompressionEnabled': False, 'isThinEnabled': True, ...}

    def test_unauthorized_access(self, test_client, sample_resource_data):
        # Try to create without auth
        response = test_client.post(
            "/api/types/storageResource/instances",
            json=sample_resource_data
        )
>       assert response.status_code == 401
E       assert 403 == 401
E        +  where 403 = <Response [403 Forbidden]>.status_code

tests/test_routes.py:120: AssertionError
=============================== warnings summary ===============================
.venv.test/lib/python3.12/site-packages/pydantic/_internal/_config.py:271
.venv.test/lib/python3.12/site-packages/pydantic/_internal/_config.py:271
.venv.test/lib/python3.12/site-packages/pydantic/_internal/_config.py:271
.venv.test/lib/python3.12/site-packages/pydantic/_internal/_config.py:271
  /home/lpetrov/projects/sandbox/dell-unisphere-mock-api/.venv.test/lib/python3.12/site-packages/pydantic/_internal/_config.py:271: PydanticDeprecatedSince20: Support for class-based `config` is deprecated, use ConfigDict instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/
    warnings.warn(DEPRECATION_MESSAGE, DeprecationWarning)

.venv.test/lib/python3.12/site-packages/pydantic/_internal/_config.py:321
  /home/lpetrov/projects/sandbox/dell-unisphere-mock-api/.venv.test/lib/python3.12/site-packages/pydantic/_internal/_config.py:321: UserWarning: Valid config keys have changed in V2:
  * 'orm_mode' has been renamed to 'from_attributes'
    warnings.warn(message, UserWarning)

tests/test_disk.py::test_create_disk
tests/test_disk.py::test_get_disk
tests/test_disk.py::test_update_disk
tests/test_disk.py::test_delete_disk
tests/test_disk.py::test_get_disks_by_pool
tests/test_disk.py::test_get_disks_by_disk_group
  /home/lpetrov/projects/sandbox/dell-unisphere-mock-api/dell_unisphere_mock_api/routers/disk.py:14: PydanticDeprecatedSince20: The `dict` method is deprecated; use `model_dump` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/
    disk_data = disk.dict()

tests/test_disk.py::test_create_disk
tests/test_disk.py::test_get_disk
tests/test_disk.py::test_update_disk
tests/test_disk.py::test_update_disk
tests/test_disk.py::test_delete_disk
tests/test_disk.py::test_get_disks_by_pool
tests/test_disk.py::test_get_disks_by_disk_group
  /home/lpetrov/projects/sandbox/dell-unisphere-mock-api/.venv.test/lib/python3.12/site-packages/pydantic/main.py:979: PydanticDeprecatedSince20: The `dict` method is deprecated; use `model_dump` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/
    warnings.warn('The `dict` method is deprecated; use `model_dump` instead.', DeprecationWarning)

tests/test_disk.py::test_update_disk
  /home/lpetrov/projects/sandbox/dell-unisphere-mock-api/dell_unisphere_mock_api/routers/disk.py:45: PydanticDeprecatedSince20: The `dict` method is deprecated; use `model_dump` instead. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.5/migration/
    updated_disk = disk_model.update(disk_id, disk.dict(exclude_unset=True))

tests/test_routes.py::TestStorageResourceRoutes::test_create_storage_resource
  /home/lpetrov/projects/sandbox/dell-unisphere-mock-api/.venv.test/lib/python3.12/site-packages/_pytest/python.py:198: PytestReturnNotNoneWarning: Expected None, but tests/test_routes.py::TestStorageResourceRoutes::test_create_storage_resource returned {'name': 'test_resource', 'description': 'Test storage resource', 'type': 'LUN', 'pool': 'pool_1', 'isThinEnabled': True, 'isCompressionEnabled': False, 'isAdvancedDedupEnabled': False, 'sizeTotal': 107374182400, 'id': 'ed809bec-ea8b-4a06-a678-7cc8d23a4407', 'health': 'OK', 'sizeUsed': 0, 'sizeAllocated': 10737418240, 'thinStatus': 'True', 'metadataSize': 0, 'metadataSizeAllocated': 0, 'snapCount': 0, 'snapSize': 0, 'snapSizeAllocated': 0, 'hostAccess': [], 'perTierSizeUsed': {}, 'created': '2024-12-23T10:24:35.719799Z', 'modified': '2024-12-23T10:24:35.719804Z'}, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?
    warnings.warn(

tests/test_routes.py::TestFilesystemRoutes::test_create_filesystem
  /home/lpetrov/projects/sandbox/dell-unisphere-mock-api/.venv.test/lib/python3.12/site-packages/_pytest/python.py:198: PytestReturnNotNoneWarning: Expected None, but tests/test_routes.py::TestFilesystemRoutes::test_create_filesystem returned {'name': 'test_filesystem', 'description': 'Test filesystem', 'nasServer': 'nas_1', 'size': 107374182400, 'protocol': 'NFS', 'id': '8f649100-14de-4f86-8d8d-7a0143cd838a', 'health': 'OK', 'sizeAllocated': 1073741824, 'sizeUsed': 0, 'cifsShares': [], 'nfsShares': [], 'created': '2024-12-23T10:24:35.916025Z', 'modified': '2024-12-23T10:24:35.916029Z'}, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?
    warnings.warn(

tests/test_routes.py::TestNasServerRoutes::test_create_nas_server
  /home/lpetrov/projects/sandbox/dell-unisphere-mock-api/.venv.test/lib/python3.12/site-packages/_pytest/python.py:198: PytestReturnNotNoneWarning: Expected None, but tests/test_routes.py::TestNasServerRoutes::test_create_nas_server returned {'name': 'test_nas', 'description': 'Test NAS server', 'pool': 'pool_1', 'currentUnixDirectoryService': 'None', 'isMultiprotocolEnabled': False, 'currentPreferredIPv4Interface': None, 'id': 'a371c6ac-e2f3-4cc1-bb6d-f363f6618214', 'health': 'OK', 'protocols': ['NFSv3'], 'fileInterfaces': [], 'fileSystemCount': 0, 'created_at': '2024-12-23T10:24:35.986027Z', 'updated_at': '2024-12-23T10:24:35.986031Z'}, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?
    warnings.warn(

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html

---------- coverage: platform linux, python 3.12.3-final-0 -----------

=========================== short test summary info ============================
FAILED tests/test_disk_group.py::test_create_disk_group - assert 422 == 201
FAILED tests/test_disk_group.py::test_create_disk_group_invalid_raid - assert...
FAILED tests/test_disk_group.py::test_get_disk_group - assert 422 == 201
FAILED tests/test_disk_group.py::test_update_disk_group - assert 422 == 201
FAILED tests/test_disk_group.py::test_delete_disk_group - assert 422 == 201
FAILED tests/test_lun.py::test_get_lun_by_name - assert 404 == 200
FAILED tests/test_lun.py::test_modify_lun - assert 405 == 200
FAILED tests/test_lun.py::test_delete_lun_by_name - assert 404 == 204
FAILED tests/test_pool.py::test_get_pool_by_name - assert 404 == 200
FAILED tests/test_pool.py::test_modify_pool - assert 405 == 200
FAILED tests/test_pool.py::test_delete_pool_by_name - assert 404 == 204
FAILED tests/test_pool_unit.py::test_create_pool_unit - assert 403 == 201
FAILED tests/test_pool_unit.py::test_get_pool_unit - json.decoder.JSONDecodeE...
FAILED tests/test_pool_unit.py::test_list_pool_units - assert 401 == 200
FAILED tests/test_pool_unit.py::test_update_pool_unit - json.decoder.JSONDeco...
FAILED tests/test_pool_unit.py::test_delete_pool_unit - json.decoder.JSONDeco...
FAILED tests/test_routes.py::TestStorageResourceRoutes::test_unauthorized_access
================== 17 failed, 57 passed, 22 warnings in 1.89s ==================
